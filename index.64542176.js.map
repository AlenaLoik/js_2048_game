{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js","node_modules/@swc/helpers/esm/_class_call_check.js","node_modules/@swc/helpers/esm/_create_class.js"],"sourcesContent":["(function () {\n\"use strict\";\nvar $3d28d7f1aac198f5$exports = {};\nfunction $8713978b2328d32b$export$71511d61b312f219(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\n\nfunction $4fc75ccb937ab1df$var$_defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction $4fc75ccb937ab1df$export$71511d61b312f219(Constructor, protoProps, staticProps) {\n    if (protoProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n\n\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ var $3d28d7f1aac198f5$var$Game = /*#__PURE__*/ function() {\n    function Game() {\n        var initialState = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;\n        (0, $8713978b2328d32b$export$71511d61b312f219)(this, Game);\n        this.defaultState = initialState ? JSON.parse(JSON.stringify(initialState)) : null;\n        this.board = initialState || Array(4).fill(0).map(function() {\n            return Array(4).fill(0);\n        });\n        this.score = 0;\n        this.status = \"idle\"; // 'idle', 'playing', 'win', 'lose'\n    }\n    (0, $4fc75ccb937ab1df$export$71511d61b312f219)(Game, [\n        {\n            key: \"moveLeft\",\n            value: function moveLeft() {\n                this.move(function(row) {\n                    return row.filter(function(v) {\n                        return v;\n                    })// eslint-disable-next-line prettier/prettier\n                    .concat(Array(4 - row.filter(function(v) {\n                        return v;\n                    }).length).fill(0));\n                });\n            }\n        },\n        {\n            key: \"moveRight\",\n            value: function moveRight() {\n                this.move(function(row) {\n                    return Array(4 - row.filter(function(v) {\n                        return v;\n                    }).length).fill(0)// eslint-disable-next-line prettier/prettier\n                    .concat(row.filter(function(v) {\n                        return v;\n                    }));\n                });\n            }\n        },\n        {\n            key: \"moveUp\",\n            value: function moveUp() {\n                this.transposeAndMove(\"up\");\n            }\n        },\n        {\n            key: \"moveDown\",\n            value: function moveDown() {\n                this.transposeAndMove(\"down\");\n            }\n        },\n        {\n            /**\n   * @returns {number}\n   */ key: \"getScore\",\n            value: function getScore() {\n                return this.score;\n            }\n        },\n        {\n            /**\n   * @returns {number[][]}\n   */ key: \"getState\",\n            value: function getState() {\n                return this.board;\n            }\n        },\n        {\n            /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ key: \"getStatus\",\n            value: function getStatus() {\n                return this.status;\n            }\n        },\n        {\n            /**\n   * Starts the game.\n   */ key: \"start\",\n            value: function start() {\n                if (this.status !== \"playing\") this.status = \"playing\";\n                this.spawnTile();\n                this.spawnTile();\n            }\n        },\n        {\n            /**\n   * Resets the game.\n   */ key: \"restart\",\n            value: function restart() {\n                var x = Array(4).fill(0).map(function() {\n                    return Array(4).fill(0);\n                });\n                this.board = this.defaultState ? JSON.parse(JSON.stringify(this.defaultState)) : x;\n                this.score = 0;\n                this.status = \"idle\";\n            // this.start();\n            }\n        },\n        {\n            // Add your own methods here\n            key: \"move\",\n            value: function move(transformFunc) {\n                if (this.status !== \"playing\") return;\n                var oldBoard = JSON.stringify(this.board);\n                this.board = this.board.map(transformFunc);\n                this.mergeTiles(transformFunc);\n                if (JSON.stringify(this.board) !== oldBoard) {\n                    this.spawnTile();\n                    this.checkGameState();\n                }\n            }\n        },\n        {\n            key: \"mergeTiles\",\n            value: function mergeTiles(transformFunc) {\n                var _this = this;\n                this.board = this.board.map(function(row) {\n                    for(var i = 0; i < row.length - 1; i++)if (row[i] === row[i + 1] && row[i] !== 0) {\n                        row[i] *= 2;\n                        row[i + 1] = 0;\n                        _this.score += row[i];\n                    }\n                    return transformFunc(row);\n                });\n            }\n        },\n        {\n            key: \"spawnTile\",\n            value: function spawnTile() {\n                var emptyCells = [];\n                this.board.forEach(function(row, rowIndex) {\n                    return row.forEach(function(cell, colIndex) {\n                        if (cell === 0) emptyCells.push({\n                            rowIndex: rowIndex,\n                            colIndex: colIndex\n                        });\n                    // eslint-disable-next-line prettier/prettier\n                    });\n                });\n                if (emptyCells.length > 0) {\n                    var _emptyCells_Math_floor = emptyCells[Math.floor(Math.random() * emptyCells.length)], rowIndex = _emptyCells_Math_floor.rowIndex, colIndex = _emptyCells_Math_floor.colIndex;\n                    this.board[rowIndex][colIndex] = Math.random() < 0.9 ? 2 : 4;\n                }\n            }\n        },\n        {\n            key: \"checkGameState\",\n            value: function checkGameState() {\n                if (this.board.flat().includes(2048)) this.status = \"win\";\n                else if (!this.hasMoves()) this.status = \"lose\";\n                this.updateUI();\n            }\n        },\n        {\n            key: \"hasMoves\",\n            value: function hasMoves() {\n                if (this.board.flat().includes(0)) return true;\n                for(var i = 0; i < 4; i++)for(var j = 0; j < 4; j++){\n                    if (i < 3 && this.board[i][j] === this.board[i + 1][j] || j < 3 && this.board[i][j] === this.board[i][j + 1]) return true;\n                }\n                return false;\n            }\n        },\n        {\n            key: \"transposeAndMove\",\n            value: function transposeAndMove(direction) {\n                var _this = this;\n                if (this.status !== \"playing\") return;\n                var oldBoard = JSON.stringify(this.board);\n                var transposed = this.board[0].map(function(_, colIndex) {\n                    return(// eslint-disable-next-line prettier/prettier\n                    _this.board.map(function(row) {\n                        return row[colIndex];\n                    }));\n                });\n                var transformed = transposed.map(function(column) {\n                    return direction === \"up\" ? _this.mergeAndSlide(column) : _this.mergeAndSlide(column.reverse()).reverse();\n                });\n                this.board = transformed[0].map(function(_, colIndex) {\n                    return(// eslint-disable-next-line prettier/prettier\n                    transformed.map(function(row) {\n                        return row[colIndex];\n                    }));\n                });\n                if (JSON.stringify(this.board) !== oldBoard) {\n                    this.spawnTile();\n                    this.checkGameState();\n                }\n            }\n        },\n        {\n            key: \"mergeAndSlide\",\n            value: function mergeAndSlide(row) {\n                var nonZero = row.filter(function(v) {\n                    return v !== 0;\n                });\n                var merged = [];\n                var i = 0;\n                while(i < nonZero.length)if (nonZero[i] === nonZero[i + 1]) {\n                    merged.push(nonZero[i] * 2);\n                    this.score += nonZero[i] * 2;\n                    i += 2;\n                } else {\n                    merged.push(nonZero[i]);\n                    i++;\n                }\n                return merged.concat(Array(4 - merged.length).fill(0));\n            }\n        },\n        {\n            key: \"updateUI\",\n            value: function updateUI() {\n            // This method will trigger DOM updates\n            }\n        }\n    ]);\n    return Game;\n}();\n$3d28d7f1aac198f5$exports = $3d28d7f1aac198f5$var$Game;\n\n\nvar $197cd56b15c33885$var$game = new $3d28d7f1aac198f5$exports();\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n    var startButton = document.querySelector(\".button.start\");\n    var scoreElement = document.querySelector(\".game-score\");\n    var fieldCells = document.querySelectorAll(\".field-cell\");\n    var messageLose = document.querySelector(\".message-lose\");\n    var messageWin = document.querySelector(\".message-win\");\n    var messageStart = document.querySelector(\".message-start\");\n    var updateUI = function() {\n        var board = $197cd56b15c33885$var$game.getState();\n        var score = $197cd56b15c33885$var$game.getScore();\n        var statusUpdate = $197cd56b15c33885$var$game.getStatus();\n        fieldCells.forEach(function(cell, index) {\n            var row = Math.floor(index / 4);\n            var col = index % 4;\n            var value = board[row][col];\n            cell.textContent = value === 0 ? \"\" : value;\n            cell.className = \"field-cell \".concat(value > 0 ? \"field-cell--\".concat(value) : \"\");\n        });\n        scoreElement.textContent = score;\n        messageLose.classList.toggle(\"hidden\", statusUpdate !== \"lose\");\n        messageWin.classList.toggle(\"hidden\", statusUpdate !== \"win\");\n        messageStart.classList.toggle(\"hidden\", statusUpdate !== \"idle\");\n    };\n    startButton.addEventListener(\"click\", function() {\n        if ($197cd56b15c33885$var$game.getStatus() === \"idle\") {\n            startButton.textContent = \"Restart\";\n            startButton.classList.remove(\"start\");\n            startButton.classList.add(\"restart\");\n            $197cd56b15c33885$var$game.start();\n        } else {\n            startButton.textContent = \"Start\";\n            startButton.classList.remove(\"restart\");\n            startButton.classList.add(\"start\");\n            $197cd56b15c33885$var$game.restart();\n        }\n        updateUI();\n    });\n    document.addEventListener(\"keydown\", function(e) {\n        if ($197cd56b15c33885$var$game.getStatus() !== \"playing\") return;\n        switch(e.key){\n            case \"ArrowLeft\":\n                $197cd56b15c33885$var$game.moveLeft();\n                break;\n            case \"ArrowRight\":\n                $197cd56b15c33885$var$game.moveRight();\n                break;\n            case \"ArrowUp\":\n                $197cd56b15c33885$var$game.moveUp();\n                break;\n            case \"ArrowDown\":\n                $197cd56b15c33885$var$game.moveDown();\n                break;\n            default:\n                return;\n        }\n        updateUI();\n    });\n    updateUI();\n});\n\n})();\n//# sourceMappingURL=index.64542176.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const startButton = document.querySelector('.button.start');\n  const scoreElement = document.querySelector('.game-score');\n  const fieldCells = document.querySelectorAll('.field-cell');\n  const messageLose = document.querySelector('.message-lose');\n  const messageWin = document.querySelector('.message-win');\n  const messageStart = document.querySelector('.message-start');\n\n  const updateUI = () => {\n    const board = game.getState();\n    const score = game.getScore();\n    const statusUpdate = game.getStatus();\n\n    fieldCells.forEach((cell, index) => {\n      const row = Math.floor(index / 4);\n      const col = index % 4;\n      const value = board[row][col];\n\n      cell.textContent = value === 0 ? '' : value;\n      cell.className = `field-cell ${value > 0 ? `field-cell--${value}` : ''}`;\n    });\n\n    scoreElement.textContent = score;\n\n    messageLose.classList.toggle('hidden', statusUpdate !== 'lose');\n    messageWin.classList.toggle('hidden', statusUpdate !== 'win');\n    messageStart.classList.toggle('hidden', statusUpdate !== 'idle');\n  };\n\n  startButton.addEventListener('click', () => {\n    if (game.getStatus() === 'idle') {\n      startButton.textContent = 'Restart';\n      startButton.classList.remove('start');\n      startButton.classList.add('restart');\n      game.start();\n    } else {\n      startButton.textContent = 'Start';\n      startButton.classList.remove('restart');\n      startButton.classList.add('start');\n      game.restart();\n    }\n    updateUI();\n  });\n\n  document.addEventListener('keydown', (e) => {\n    if (game.getStatus() !== 'playing') {\n      return;\n    }\n\n    switch (e.key) {\n      case 'ArrowLeft':\n        game.moveLeft();\n        break;\n      case 'ArrowRight':\n        game.moveRight();\n        break;\n      case 'ArrowUp':\n        game.moveUp();\n        break;\n      case 'ArrowDown':\n        game.moveDown();\n        break;\n      default:\n        return;\n    }\n\n    updateUI();\n  });\n\n  updateUI();\n});\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(initialState = null) {\n    this.defaultState = initialState\n      ? JSON.parse(JSON.stringify(initialState))\n      : null;\n\n    this.board =\n      initialState ||\n      Array(4)\n        .fill(0)\n        .map(() => Array(4).fill(0));\n    this.score = 0;\n    this.status = 'idle'; // 'idle', 'playing', 'win', 'lose'\n  }\n\n  moveLeft() {\n    this.move((row) =>\n      row\n        .filter((v) => v)\n        // eslint-disable-next-line prettier/prettier\n        .concat(Array(4 - row.filter((v) => v).length).fill(0)));\n  }\n  moveRight() {\n    this.move((row) =>\n      Array(4 - row.filter((v) => v).length)\n        .fill(0)\n        // eslint-disable-next-line prettier/prettier\n        .concat(row.filter((v) => v)));\n  }\n\n  moveUp() {\n    this.transposeAndMove('up');\n  }\n\n  moveDown() {\n    this.transposeAndMove('down');\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.board;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.status;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    if (this.status !== 'playing') {\n      this.status = 'playing';\n    }\n\n    this.spawnTile();\n    this.spawnTile();\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    const x = Array(4)\n      .fill(0)\n      .map(() => Array(4).fill(0));\n\n    this.board = this.defaultState\n      ? JSON.parse(JSON.stringify(this.defaultState))\n      : x;\n    this.score = 0;\n    this.status = 'idle';\n    // this.start();\n  }\n\n  // Add your own methods here\n  move(transformFunc) {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    const oldBoard = JSON.stringify(this.board);\n\n    this.board = this.board.map(transformFunc);\n    this.mergeTiles(transformFunc);\n\n    if (JSON.stringify(this.board) !== oldBoard) {\n      this.spawnTile();\n      this.checkGameState();\n    }\n  }\n\n  mergeTiles(transformFunc) {\n    this.board = this.board.map((row) => {\n      for (let i = 0; i < row.length - 1; i++) {\n        if (row[i] === row[i + 1] && row[i] !== 0) {\n          row[i] *= 2;\n          row[i + 1] = 0;\n          this.score += row[i];\n        }\n      }\n\n      return transformFunc(row);\n    });\n  }\n\n  spawnTile() {\n    const emptyCells = [];\n\n    this.board.forEach((row, rowIndex) =>\n      row.forEach((cell, colIndex) => {\n        if (cell === 0) {\n          emptyCells.push({ rowIndex, colIndex });\n        }\n        // eslint-disable-next-line prettier/prettier\n      }));\n\n    if (emptyCells.length > 0) {\n      const { rowIndex, colIndex } =\n        emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n      this.board[rowIndex][colIndex] = Math.random() < 0.9 ? 2 : 4;\n    }\n  }\n\n  checkGameState() {\n    if (this.board.flat().includes(2048)) {\n      this.status = 'win';\n    } else if (!this.hasMoves()) {\n      this.status = 'lose';\n    }\n    this.updateUI();\n  }\n\n  hasMoves() {\n    if (this.board.flat().includes(0)) {\n      return true;\n    }\n\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        if (\n          (i < 3 && this.board[i][j] === this.board[i + 1][j]) ||\n          (j < 3 && this.board[i][j] === this.board[i][j + 1])\n        ) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  transposeAndMove(direction) {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    const oldBoard = JSON.stringify(this.board);\n\n    const transposed = this.board[0].map((_, colIndex) =>\n      // eslint-disable-next-line prettier/prettier\n      this.board.map((row) => row[colIndex]));\n\n    const transformed = transposed.map(\n      (column) =>\n        direction === 'up'\n          ? this.mergeAndSlide(column)\n          : this.mergeAndSlide(column.reverse()).reverse(),\n      // eslint-disable-next-line function-paren-newline\n    );\n\n    this.board = transformed[0].map((_, colIndex) =>\n      // eslint-disable-next-line prettier/prettier\n      transformed.map((row) => row[colIndex]));\n\n    if (JSON.stringify(this.board) !== oldBoard) {\n      this.spawnTile();\n      this.checkGameState();\n    }\n  }\n\n  mergeAndSlide(row) {\n    const nonZero = row.filter((v) => v !== 0);\n    const merged = [];\n\n    let i = 0;\n\n    while (i < nonZero.length) {\n      if (nonZero[i] === nonZero[i + 1]) {\n        merged.push(nonZero[i] * 2);\n        this.score += nonZero[i] * 2;\n        i += 2;\n      } else {\n        merged.push(nonZero[i]);\n        i++;\n      }\n    }\n\n    return merged.concat(Array(4 - merged.length).fill(0));\n  }\n\n  updateUI() {\n    // This method will trigger DOM updates\n  }\n}\n\nmodule.exports = Game;\n","function _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _class_call_check as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n"],"names":["$197cd56b15c33885$var$game","protoProps","Game","initialState","arguments","length","instance","Constructor","TypeError","defaultState","JSON","parse","stringify","board","Array","fill","map","score","status","key","value","move","row","filter","v","concat","transposeAndMove","spawnTile","x","transformFunc","oldBoard","mergeTiles","checkGameState","_this","i","emptyCells","forEach","rowIndex","cell","colIndex","push","_emptyCells_Math_floor","Math","floor","random","flat","includes","hasMoves","updateUI","j","direction","transformed","transposed","_","column","mergeAndSlide","reverse","nonZero","merged","$4fc75ccb937ab1df$var$_defineProperties","target","props","descriptor","enumerable","configurable","writable","Object","defineProperty","prototype","document","addEventListener","startButton","querySelector","scoreElement","fieldCells","querySelectorAll","messageLose","messageWin","messageStart","getState","getScore","statusUpdate","getStatus","index","textContent","className","classList","toggle","remove","add","start","restart","e","moveLeft","moveRight","moveUp","moveDown"],"version":3,"file":"index.64542176.js.map"}