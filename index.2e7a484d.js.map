{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ class $a5fd07fa01589658$var$Game {\n    /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */ constructor(initialState = null){\n        this.defaultState = initialState ? JSON.parse(JSON.stringify(initialState)) : null;\n        this.board = initialState || Array(4).fill(0).map(()=>Array(4).fill(0));\n        this.score = 0;\n        this.status = \"idle\"; // 'idle', 'playing', 'win', 'lose'\n    }\n    moveLeft() {\n        this.move((row)=>row.filter((v)=>v)// eslint-disable-next-line prettier/prettier\n            .concat(Array(4 - row.filter((v)=>v).length).fill(0)));\n    }\n    moveRight() {\n        this.move((row)=>Array(4 - row.filter((v)=>v).length).fill(0)// eslint-disable-next-line prettier/prettier\n            .concat(row.filter((v)=>v)));\n    }\n    moveUp() {\n        this.transposeAndMove(\"up\");\n    }\n    moveDown() {\n        this.transposeAndMove(\"down\");\n    }\n    /**\n   * @returns {number}\n   */ getScore() {\n        return this.score;\n    }\n    /**\n   * @returns {number[][]}\n   */ getState() {\n        return this.board;\n    }\n    /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ getStatus() {\n        return this.status;\n    }\n    /**\n   * Starts the game.\n   */ start() {\n        if (this.status !== \"playing\") this.status = \"playing\";\n        this.spawnTile();\n        this.spawnTile();\n    }\n    /**\n   * Resets the game.\n   */ restart() {\n        const x = Array(4).fill(0).map(()=>Array(4).fill(0));\n        this.board = this.defaultState ? JSON.parse(JSON.stringify(this.defaultState)) : x;\n        this.score = 0;\n        this.status = \"idle\";\n    // this.start();\n    }\n    // Add your own methods here\n    move(transformFunc) {\n        if (this.status !== \"playing\") return;\n        const oldBoard = JSON.stringify(this.board);\n        this.board = this.board.map(transformFunc);\n        this.mergeTiles(transformFunc);\n        if (JSON.stringify(this.board) !== oldBoard) {\n            this.spawnTile();\n            this.checkGameState();\n        }\n    }\n    mergeTiles(transformFunc) {\n        this.board = this.board.map((row)=>{\n            for(let i = 0; i < row.length - 1; i++)if (row[i] === row[i + 1] && row[i] !== 0) {\n                row[i] *= 2;\n                row[i + 1] = 0;\n                this.score += row[i];\n            }\n            return transformFunc(row);\n        });\n    }\n    spawnTile() {\n        const emptyCells = [];\n        this.board.forEach((row, rowIndex)=>row.forEach((cell, colIndex)=>{\n                if (cell === 0) emptyCells.push({\n                    rowIndex: rowIndex,\n                    colIndex: colIndex\n                });\n            // eslint-disable-next-line prettier/prettier\n            }));\n        if (emptyCells.length > 0) {\n            const { rowIndex: rowIndex, colIndex: colIndex } = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n            this.board[rowIndex][colIndex] = Math.random() < 0.9 ? 2 : 4;\n        }\n    }\n    checkGameState() {\n        if (this.board.flat().includes(2048)) this.status = \"win\";\n        else if (!this.hasMoves()) this.status = \"lose\";\n        this.updateUI();\n    }\n    hasMoves() {\n        if (this.board.flat().includes(0)) return true;\n        for(let i = 0; i < 4; i++)for(let j = 0; j < 4; j++){\n            if (i < 3 && this.board[i][j] === this.board[i + 1][j] || j < 3 && this.board[i][j] === this.board[i][j + 1]) return true;\n        }\n        return false;\n    }\n    transposeAndMove(direction) {\n        if (this.status !== \"playing\") return;\n        const oldBoard = JSON.stringify(this.board);\n        const transposed = this.board[0].map((_, colIndex)=>// eslint-disable-next-line prettier/prettier\n            this.board.map((row)=>row[colIndex]));\n        const transformed = transposed.map((column)=>direction === \"up\" ? this.mergeAndSlide(column) : this.mergeAndSlide(column.reverse()).reverse());\n        this.board = transformed[0].map((_, colIndex)=>// eslint-disable-next-line prettier/prettier\n            transformed.map((row)=>row[colIndex]));\n        if (JSON.stringify(this.board) !== oldBoard) {\n            this.spawnTile();\n            this.checkGameState();\n        }\n    }\n    mergeAndSlide(row) {\n        const nonZero = row.filter((v)=>v !== 0);\n        const merged = [];\n        let i = 0;\n        while(i < nonZero.length)if (nonZero[i] === nonZero[i + 1]) {\n            merged.push(nonZero[i] * 2);\n            this.score += nonZero[i] * 2;\n            i += 2;\n        } else {\n            merged.push(nonZero[i]);\n            i++;\n        }\n        return merged.concat(Array(4 - merged.length).fill(0));\n    }\n    updateUI() {\n    // This method will trigger DOM updates\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\ndocument.addEventListener(\"DOMContentLoaded\", ()=>{\n    const startButton = document.querySelector(\".button.start\");\n    const scoreElement = document.querySelector(\".game-score\");\n    const fieldCells = document.querySelectorAll(\".field-cell\");\n    const messageLose = document.querySelector(\".message-lose\");\n    const messageWin = document.querySelector(\".message-win\");\n    const messageStart = document.querySelector(\".message-start\");\n    const updateUI = ()=>{\n        const board = $09e991522ca7e64e$var$game.getState();\n        const score = $09e991522ca7e64e$var$game.getScore();\n        const statusUpdate = $09e991522ca7e64e$var$game.getStatus();\n        fieldCells.forEach((cell, index)=>{\n            const row = Math.floor(index / 4);\n            const col = index % 4;\n            const value = board[row][col];\n            cell.textContent = value === 0 ? \"\" : value;\n            cell.className = `field-cell ${value > 0 ? `field-cell--${value}` : \"\"}`;\n        });\n        scoreElement.textContent = score;\n        messageLose.classList.toggle(\"hidden\", statusUpdate !== \"lose\");\n        messageWin.classList.toggle(\"hidden\", statusUpdate !== \"win\");\n        messageStart.classList.toggle(\"hidden\", statusUpdate !== \"idle\");\n    };\n    startButton.addEventListener(\"click\", ()=>{\n        if ($09e991522ca7e64e$var$game.getStatus() === \"idle\") {\n            startButton.textContent = \"Restart\";\n            startButton.classList.remove(\"start\");\n            startButton.classList.add(\"restart\");\n            $09e991522ca7e64e$var$game.start();\n        } else {\n            startButton.textContent = \"Start\";\n            startButton.classList.remove(\"restart\");\n            startButton.classList.add(\"start\");\n            $09e991522ca7e64e$var$game.restart();\n        }\n        updateUI();\n    });\n    document.addEventListener(\"keydown\", (e)=>{\n        if ($09e991522ca7e64e$var$game.getStatus() !== \"playing\") return;\n        switch(e.key){\n            case \"ArrowLeft\":\n                $09e991522ca7e64e$var$game.moveLeft();\n                break;\n            case \"ArrowRight\":\n                $09e991522ca7e64e$var$game.moveRight();\n                break;\n            case \"ArrowUp\":\n                $09e991522ca7e64e$var$game.moveUp();\n                break;\n            case \"ArrowDown\":\n                $09e991522ca7e64e$var$game.moveDown();\n                break;\n            default:\n                return;\n        }\n        updateUI();\n    });\n    updateUI();\n});\n\n\n//# sourceMappingURL=index.2e7a484d.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const startButton = document.querySelector('.button.start');\n  const scoreElement = document.querySelector('.game-score');\n  const fieldCells = document.querySelectorAll('.field-cell');\n  const messageLose = document.querySelector('.message-lose');\n  const messageWin = document.querySelector('.message-win');\n  const messageStart = document.querySelector('.message-start');\n\n  const updateUI = () => {\n    const board = game.getState();\n    const score = game.getScore();\n    const statusUpdate = game.getStatus();\n\n    fieldCells.forEach((cell, index) => {\n      const row = Math.floor(index / 4);\n      const col = index % 4;\n      const value = board[row][col];\n\n      cell.textContent = value === 0 ? '' : value;\n      cell.className = `field-cell ${value > 0 ? `field-cell--${value}` : ''}`;\n    });\n\n    scoreElement.textContent = score;\n\n    messageLose.classList.toggle('hidden', statusUpdate !== 'lose');\n    messageWin.classList.toggle('hidden', statusUpdate !== 'win');\n    messageStart.classList.toggle('hidden', statusUpdate !== 'idle');\n  };\n\n  startButton.addEventListener('click', () => {\n    if (game.getStatus() === 'idle') {\n      startButton.textContent = 'Restart';\n      startButton.classList.remove('start');\n      startButton.classList.add('restart');\n      game.start();\n    } else {\n      startButton.textContent = 'Start';\n      startButton.classList.remove('restart');\n      startButton.classList.add('start');\n      game.restart();\n    }\n    updateUI();\n  });\n\n  document.addEventListener('keydown', (e) => {\n    if (game.getStatus() !== 'playing') {\n      return;\n    }\n\n    switch (e.key) {\n      case 'ArrowLeft':\n        game.moveLeft();\n        break;\n      case 'ArrowRight':\n        game.moveRight();\n        break;\n      case 'ArrowUp':\n        game.moveUp();\n        break;\n      case 'ArrowDown':\n        game.moveDown();\n        break;\n      default:\n        return;\n    }\n\n    updateUI();\n  });\n\n  updateUI();\n});\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(initialState = null) {\n    this.defaultState = initialState\n      ? JSON.parse(JSON.stringify(initialState))\n      : null;\n\n    this.board =\n      initialState ||\n      Array(4)\n        .fill(0)\n        .map(() => Array(4).fill(0));\n    this.score = 0;\n    this.status = 'idle'; // 'idle', 'playing', 'win', 'lose'\n  }\n\n  moveLeft() {\n    this.move((row) =>\n      row\n        .filter((v) => v)\n        // eslint-disable-next-line prettier/prettier\n        .concat(Array(4 - row.filter((v) => v).length).fill(0)));\n  }\n  moveRight() {\n    this.move((row) =>\n      Array(4 - row.filter((v) => v).length)\n        .fill(0)\n        // eslint-disable-next-line prettier/prettier\n        .concat(row.filter((v) => v)));\n  }\n\n  moveUp() {\n    this.transposeAndMove('up');\n  }\n\n  moveDown() {\n    this.transposeAndMove('down');\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.board;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.status;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    if (this.status !== 'playing') {\n      this.status = 'playing';\n    }\n\n    this.spawnTile();\n    this.spawnTile();\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    const x = Array(4)\n      .fill(0)\n      .map(() => Array(4).fill(0));\n\n    this.board = this.defaultState\n      ? JSON.parse(JSON.stringify(this.defaultState))\n      : x;\n    this.score = 0;\n    this.status = 'idle';\n    // this.start();\n  }\n\n  // Add your own methods here\n  move(transformFunc) {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    const oldBoard = JSON.stringify(this.board);\n\n    this.board = this.board.map(transformFunc);\n    this.mergeTiles(transformFunc);\n\n    if (JSON.stringify(this.board) !== oldBoard) {\n      this.spawnTile();\n      this.checkGameState();\n    }\n  }\n\n  mergeTiles(transformFunc) {\n    this.board = this.board.map((row) => {\n      for (let i = 0; i < row.length - 1; i++) {\n        if (row[i] === row[i + 1] && row[i] !== 0) {\n          row[i] *= 2;\n          row[i + 1] = 0;\n          this.score += row[i];\n        }\n      }\n\n      return transformFunc(row);\n    });\n  }\n\n  spawnTile() {\n    const emptyCells = [];\n\n    this.board.forEach((row, rowIndex) =>\n      row.forEach((cell, colIndex) => {\n        if (cell === 0) {\n          emptyCells.push({ rowIndex, colIndex });\n        }\n        // eslint-disable-next-line prettier/prettier\n      }));\n\n    if (emptyCells.length > 0) {\n      const { rowIndex, colIndex } =\n        emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n      this.board[rowIndex][colIndex] = Math.random() < 0.9 ? 2 : 4;\n    }\n  }\n\n  checkGameState() {\n    if (this.board.flat().includes(2048)) {\n      this.status = 'win';\n    } else if (!this.hasMoves()) {\n      this.status = 'lose';\n    }\n    this.updateUI();\n  }\n\n  hasMoves() {\n    if (this.board.flat().includes(0)) {\n      return true;\n    }\n\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        if (\n          (i < 3 && this.board[i][j] === this.board[i + 1][j]) ||\n          (j < 3 && this.board[i][j] === this.board[i][j + 1])\n        ) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  transposeAndMove(direction) {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    const oldBoard = JSON.stringify(this.board);\n\n    const transposed = this.board[0].map((_, colIndex) =>\n      // eslint-disable-next-line prettier/prettier\n      this.board.map((row) => row[colIndex]));\n\n    const transformed = transposed.map(\n      (column) =>\n        direction === 'up'\n          ? this.mergeAndSlide(column)\n          : this.mergeAndSlide(column.reverse()).reverse(),\n      // eslint-disable-next-line function-paren-newline\n    );\n\n    this.board = transformed[0].map((_, colIndex) =>\n      // eslint-disable-next-line prettier/prettier\n      transformed.map((row) => row[colIndex]));\n\n    if (JSON.stringify(this.board) !== oldBoard) {\n      this.spawnTile();\n      this.checkGameState();\n    }\n  }\n\n  mergeAndSlide(row) {\n    const nonZero = row.filter((v) => v !== 0);\n    const merged = [];\n\n    let i = 0;\n\n    while (i < nonZero.length) {\n      if (nonZero[i] === nonZero[i + 1]) {\n        merged.push(nonZero[i] * 2);\n        this.score += nonZero[i] * 2;\n        i += 2;\n      } else {\n        merged.push(nonZero[i]);\n        i++;\n      }\n    }\n\n    return merged.concat(Array(4 - merged.length).fill(0));\n  }\n\n  updateUI() {\n    // This method will trigger DOM updates\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$game","constructor","initialState","defaultState","JSON","parse","stringify","board","Array","fill","map","score","status","moveLeft","move","row","filter","v","concat","length","moveRight","moveUp","transposeAndMove","moveDown","getScore","getState","getStatus","start","spawnTile","restart","x","transformFunc","oldBoard","mergeTiles","checkGameState","i","emptyCells","forEach","rowIndex","cell","colIndex","push","Math","floor","random","flat","includes","hasMoves","updateUI","j","direction","transformed","transposed","_","column","mergeAndSlide","reverse","nonZero","merged","document","addEventListener","startButton","querySelector","scoreElement","fieldCells","querySelectorAll","messageLose","messageWin","messageStart","statusUpdate","index","value","textContent","className","classList","toggle","remove","add","e","key"],"version":3,"file":"index.2e7a484d.js.map"}